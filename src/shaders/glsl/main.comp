#version 450
#extension GL_GOOGLE_include_directive : require

#include "voxel.glsl"
#include "ray.glsl"

layout(local_size_x = 16, local_size_y = 16) in;
layout(set=1, binding = 0, rgba8) uniform writeonly image2D destImage;

layout(set = 0, binding = 0) buffer Voxels {
    int data[];
} voxel;

layout(set = 0, binding = 1) buffer Chunks {
    Chunk data[];
} chunk;

layout(std430, set = 0, binding = 2) buffer WorldInfo {
    vec4 posTime;
    vec2 cameraRot;
} worldInfo;

int getVoxel(int i) {
    int data = voxel.data[i/2];
    data >>= 16*(i&1); // shift high bits if odd index
    return data&0xFFFF; // mask lower bits
}

Chunk getIntersectingChunk(Ray ray, out Intersection intersection) {
    int chunkCount = 64;
    Chunk closestChunk;
    Intersection closestIntersection;
    closestIntersection.near = 1e30;
    closestIntersection.hit = false;

    for (int i = 0; i < chunkCount; i++) { // go through each chunk
        Chunk c = chunk.data[i];
        Box b = createBox(c.pos*64, c.size);
        Intersection intersection = intersectAABB(ray, b); // check its intersection
        if (intersection.hit && intersection.near < closestIntersection.near) { // if it hit and is closer than our closest found intersection
            closestIntersection = intersection;
            closestChunk = c;
        }
    } 

    intersection = closestIntersection;
    return closestChunk; // start with infinite distance
}

bool DDAVoxels(Chunk c, vec3 rayOrigin, float maxDist, vec3 rayDirection, out int data) {
    rayOrigin -= c.pos * 64; // offset the ray to be inside the chunk
    rayOrigin += rayDirection * 1e-3; // push the ray forward a little bit to avoid it being outside of the chunk

    ivec3 voxel = ivec3(floor(rayOrigin));
    vec3 step = sign(rayDirection);
    vec3 tMax;
    vec3 tDelta = abs(1.0 / rayDirection);

    for (int i = 0; i < 3; i++) {
        if (step[i] > 0.0)
            tMax[i] = (float(voxel[i]) + 1.0 - rayOrigin[i]) * tDelta[i];
        else
            tMax[i] = (rayOrigin[i] - float(voxel[i])) * tDelta[i];
    }

    float traveled = 0.0;
    while (traveled < maxDist) {
        if (voxel.x < 0 || voxel.y < 0 || voxel.z < 0 ||
            voxel.x >= c.size.x || voxel.y >= c.size.y || voxel.z >= c.size.z) {
            return false; // outside the chunk
        }
        int index = c.index + voxel.x + voxel.y * c.size.x + voxel.z * c.size.x * c.size.y;
        data = getVoxel(index);

        if ((data & 0x8000) != 0)
            return true;

        // Step along smallest tMax
        vec3 c = vec3(tMax.x <= tMax.y && tMax.x <= tMax.z,
              tMax.y <  tMax.x && tMax.y <= tMax.z,
              tMax.z <  tMax.x && tMax.z <  tMax.y);

        int axis = int(dot(c, vec3(0.0, 1.0, 2.0)));

        voxel[axis] += int(step[axis]);
        traveled = tMax[axis];
        tMax[axis] += tDelta[axis];
    }
    return false;
}


void main() {
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(destImage);
    if (pos.x >= imgSize.x || pos.y >= imgSize.y) return; // dont do pixels that are outside of the texture

    float aspectRatio = float(imgSize.x)/imgSize.y;
    
    vec2 uv = vec2(pos)/imgSize;
    uv *= 2;
    uv -= 1;
    uv.y *= -1;
    uv.x *= aspectRatio;

    vec3 dir = normalize(vec3(uv, 1.0));

    // Quaternion for pitch (X-axis)
    vec4 qPitch = vec4(vec3(1.0, 0.0, 0.0) * sin(worldInfo.cameraRot.y*0.5), cos(worldInfo.cameraRot.y*0.5));

    // Quaternion for yaw (Y-axis)
    vec4 qYaw = vec4(vec3(0.0, 1.0, 0.0) * sin(worldInfo.cameraRot.x*0.5), cos(worldInfo.cameraRot.x*0.5));

    // Combine into single rotation
    vec4 q = quatMultiply(qYaw, qPitch); // note: yaw * pitch
    dir = rotateVectorByQuat(dir, q);

    Ray ray = createRay(
        worldInfo.posTime.xyz,
        dir
    );

    vec3 color = ray.dir;

    while (true) {
        Intersection intersection;
        Chunk c = getIntersectingChunk(ray, intersection);
        if (intersection.hit) {
            int data;
            bool hit = DDAVoxels(c, ray.pos+ray.dir*intersection.near, intersection.far-intersection.near, ray.dir, data);
            if (hit) {
                color = getVoxelColor(data);
                break;
            }
        } else { // if no chunks intersected return
            break;
        }
        ray.pos += ray.dir*intersection.far+ray.dir*1e-5;
    }
    
    imageStore(destImage, pos, vec4(color, 1.0));
}